{"English":"Passing Props to a Component Props let you think about parent and child components independently. For example, you can change the person or the size props inside Profile without having to think about how Avatar uses them. Similarly, you can change how the Avatar uses these props, without looking at the Profile.","Tamil":"\u0b92\u0bb0\u0bc1 component-\u0b95\u0bcd\u0b95\u0bc1 props \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0ba4\u0bb2\u0bcd props \u0bae\u0bc2\u0bb2\u0bae\u0bcd parent \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd children component\u0b95\u0bb3\u0bc8 \u0ba4\u0ba9\u0bbf\u0ba4\u0bcd\u0ba4\u0ba9\u0bbf\u0baf\u0bbe\u0b95 \u0baf\u0bcb\u0b9a\u0bbf\u0b95\u0bcd\u0b95 \u0bae\u0bc1\u0b9f\u0bbf\u0baf\u0bc1\u0bae\u0bcd. \u0b8e\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bbe\u0b95, Profile \u0b87\u0bb2\u0bcd \u0b89\u0bb3\u0bcd\u0bb3 person \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 size props\u0b95\u0bb3\u0bc8 \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0bae\u0bbe\u0bb1\u0bcd\u0bb1\u0bb2\u0bbe\u0bae\u0bcd, \u0b85\u0bb5\u0bb1\u0bcd\u0bb1\u0bc8 Avatar \u0b8e\u0baa\u0bcd\u0baa\u0b9f\u0bbf \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1 \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc8\u0b95\u0bcd \u0b95\u0bb5\u0ba9\u0bbf\u0b95\u0bcd\u0b95\u0bbe\u0bae\u0bb2\u0bcd. \u0b85\u0ba4\u0bc1\u0baa\u0bcb\u0bb2, Avatar \u0b87\u0bb5\u0bc8 \u0b8e\u0baa\u0bcd\u0baa\u0b9f\u0bbf \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1 \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc8\u0baf\u0bc1\u0bae\u0bcd \u0bae\u0bbe\u0bb1\u0bcd\u0bb1\u0bb2\u0bbe\u0bae\u0bcd, Profile \u0b90\u0baa\u0bcd \u0baa\u0bbe\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bbe\u0bae\u0bb2\u0bcd."}
{"English":"Defining a component Traditionally when creating web pages, web developers marked up their content and then added interaction by sprinkling on some JavaScript. This worked great when interaction was a nice-to-have on the web. Now it is expected for many sites and all apps. React puts interactivity first while still using the same technology: a React component is a JavaScript function that you can sprinkle with markup.","Tamil":"\u0b92\u0bb0\u0bc1 component-\u0b90 \u0bb5\u0bb0\u0bc8\u0baf\u0bb1\u0bc1\u0ba4\u0bcd\u0ba4\u0bb2\u0bcd \u0b9a\u0bbe\u0ba4\u0bbe\u0bb0\u0ba3\u0bae\u0bbe\u0b95 web pages \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd\u0baa\u0bcb\u0ba4\u0bc1,  web developers \u0b85\u0bb5\u0bb0\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd content \u0b85\u0b9f\u0bc8\u0baf\u0bbe\u0bb3\u0bae\u0bcd \u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bbf, \u0baa\u0bbf\u0bb1\u0b95\u0bc1 \u0b9a\u0bbf\u0bb2 JavaScript-\u0b90 \u0b9a\u0bc7\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bc1 interaction \u0b9a\u0bc7\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0ba9\u0bb0\u0bcd.  web-\u0b87\u0bb2\u0bcd interaction \u0bae\u0bbf\u0b95\u0bb5\u0bc1\u0bae\u0bcd \u0ba4\u0bc7\u0bb5\u0bc8\u0baf\u0bbe\u0ba9 \u0baa\u0bcb\u0ba4\u0bc1 \u0b87\u0ba4\u0bc1 \u0b9a\u0bbf\u0bb1\u0baa\u0bcd\u0baa\u0bbe\u0b95 \u0b9a\u0bc6\u0baf\u0bb2\u0bcd\u0baa\u0b9f\u0bcd\u0b9f\u0ba4\u0bc1. \u0ba4\u0bb1\u0bcd\u0baa\u0bcb\u0ba4\u0bc1 \u0baa\u0bb2 sites-\u0bb3\u0bbf\u0bb2\u0bc1\u0bae\u0bcd \u0b85\u0ba9\u0bc8\u0ba4\u0bcd\u0ba4\u0bc1 apps\u0bb3\u0bbf\u0bb2\u0bc1\u0bae\u0bcd \u0b87\u0ba4\u0bc1 \u0b8e\u0ba4\u0bbf\u0bb0\u0bcd\u0baa\u0bbe\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1. React, \u0b85\u0ba4\u0bc7 \u0ba4\u0bca\u0bb4\u0bbf\u0bb2\u0bcd\u0ba8\u0bc1\u0b9f\u0bcd\u0baa\u0ba4\u0bcd\u0ba4\u0bc8\u0baa\u0bcd \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf\u0ba9\u0bbe\u0bb2\u0bc1\u0bae\u0bcd react interactivity-\u0b90 \u0bae\u0bc1\u0ba4\u0ba9\u0bcd\u0bae\u0bc8\u0baf\u0bbe\u0b95\u0b95\u0bcd \u0b95\u0bb0\u0bc1\u0ba4\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1: \u0b92\u0bb0\u0bc1 React component \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0bae\u0bbe\u0bb0\u0bcd\u0b95\u0bcd\u0b85\u0baa\u0bcd \u0b9a\u0bc7\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0b95\u0bcd\u0b95\u0bc2\u0b9f\u0bbf\u0baf JavaScript function."}
{"English":"Using a component Now that you\\u2019ve defined your Profile component, you can nest it inside other components. For example, you can export a Gallery component that uses multiple Profile components.","Tamil":"\u0b92\u0bb0\u0bc1 component \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd \u0b87\u0baa\u0bcd\u0baa\u0bcb\u0ba4\u0bc1 \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd Profile component\u0b9f\u0bc8 \u0bb5\u0bb0\u0bc8\u0baf\u0bb1\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0bb5\u0bbf\u0b9f\u0bcd\u0b9f\u0ba4\u0bbe\u0bb2\u0bcd, \u0b85\u0ba4\u0bc8 \u0bae\u0bb1\u0bcd\u0bb1 component\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0bb3\u0bcd \u0b87\u0b9f\u0bc1\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd. \u0b8e\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bbe\u0b95, \u0baa\u0bb2 Profile component\u0b95\u0bb3\u0bc8 \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0bae\u0bcd \u0b92\u0bb0\u0bc1 Gallery component\u0b9f\u0bc8 \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0b8f\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0ba4\u0bbf \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bb2\u0bbe\u0bae\u0bcd."}
{"English":"Manipulating the DOM with Refs In this example, itemsRef doesn\\u2019t hold a single DOM node. Instead, it holds a Map from item ID to a DOM node. The ref callback on every list item takes care to update the Map.","Tamil":"Refs \u0b95\u0bca\u0ba3\u0bcd\u0b9f\u0bc1 DOM-\u0b90 \u0b87\u0baf\u0bb1\u0bcd\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bb2\u0bcd \u0b87\u0ba8\u0bcd\u0ba4 \u0b8e\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bbf\u0bb2\u0bcd, itemsRef \u0b92\u0bb0\u0bc1 \u0ba4\u0ba9\u0bbf\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f DOM node-\u0b90\u0b95\u0bcd\u0b95\u0bca\u0ba3\u0bcd\u0b9f\u0bc1 \u0b87\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bb5\u0bbf\u0bb2\u0bcd\u0bb2\u0bc8. \u0b85\u0ba4\u0bb1\u0bcd\u0b95\u0bc1 \u0baa\u0ba4\u0bbf\u0bb2\u0bbe\u0b95, \u0b85\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 Map-\u0b90 items ID-\u0b95\u0bcd\u0b95\u0bc1 DOM node-\u0b90 \u0b85\u0b9f\u0bc8\u0baf\u0bbe\u0bb3\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1. \u0b92\u0bb5\u0bcd\u0bb5\u0bca\u0bb0\u0bc1 \u0baa\u0b9f\u0bcd\u0b9f\u0bbf\u0baf\u0bb2\u0bcd element\u0baf\u0bbf\u0bb2\u0bc1\u0bae\u0bcd ref callback \u0b85\u0ba8\u0bcd\u0ba4 Map-\u0b90 \u0baa\u0bc1\u0ba4\u0bc1\u0baa\u0bcd\u0baa\u0bbf\u0b95\u0bcd\u0b95 \u0b95\u0bb5\u0ba9\u0bbf\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0bca\u0bb3\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1."}
{"English":"Forwarding props with the JSX spread syntax Sometimes, passing props gets very repetitive. There\\u2019s nothing wrong with repetitive code\\u2014it can be more legible. But at times you may value conciseness.","Tamil":"JSX spread syntax\u0baf\u0bc1\u0b9f\u0ba9\u0bcd props\u0b95\u0bb3\u0bc8 \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0ba4\u0bb2\u0bcd \u0b9a\u0bbf\u0bb2 \u0b9a\u0bae\u0baf\u0b99\u0bcd\u0b95\u0bb3\u0bbf\u0bb2\u0bcd, props\u0b95\u0bb3\u0bc8 \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0bb5\u0ba4\u0bc1 \u0bae\u0bbf\u0b95\u0bb5\u0bc1\u0bae\u0bcd \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0b87\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd. \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0b89\u0bb3\u0bcd\u0bb3 code \u0ba4\u0bb5\u0bb1\u0bbf\u0bb2\u0bcd\u0bb2\u0bc8\\u2014\u0b85\u0ba4\u0bc1 \u0bae\u0bbf\u0b95\u0bb5\u0bc1\u0bae\u0bcd \u0ba4\u0bc6\u0bb3\u0bbf\u0bb5\u0bbe\u0b95 \u0b87\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd. \u0b86\u0ba9\u0bbe\u0bb2\u0bcd \u0b9a\u0bbf\u0bb2 \u0ba8\u0bc7\u0bb0\u0b99\u0bcd\u0b95\u0bb3\u0bbf\u0bb2\u0bcd, \u0b9a\u0bc1\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0ba4\u0bcd\u0ba4\u0bc8 \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0ba8\u0bb2\u0bcd\u0bb2\u0ba4\u0bbe\u0b95 \u0b95\u0bb0\u0bc1\u0ba4\u0bb2\u0bbe\u0bae\u0bcd."}
{"English":"Destructuring props Usually you don\\u2019t need the whole props object itself, so you destructure it into individual props.","Tamil":"props\u0b95\u0bb3\u0bc8 destructure \u0b9a\u0bc6\u0baf\u0bcd\u0ba4\u0bb2\u0bcd \u0baa\u0bca\u0ba4\u0bc1\u0bb5\u0bbe\u0b95 \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0bae\u0bc1\u0bb4\u0bc1 props object \u0ba4\u0bc7\u0bb5\u0bc8\u0baf\u0bbf\u0bb2\u0bcd\u0bb2\u0bc8\u0baf\u0bc6\u0ba9\u0bcd\u0bb1\u0bc1 \u0ba8\u0bbf\u0ba9\u0bc8\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd, \u0b86\u0b95\u0bb5\u0bc7 \u0b85\u0ba4\u0bc8 \u0ba4\u0ba9\u0bbf\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f props\u0b95\u0bb3\u0bbe\u0b95 destructure \u0b9a\u0bc6\u0baf\u0bcd\u0b95\u0bbf\u0bb1\u0bbe\u0bb0\u0bcd\u0b95\u0bb3\u0bcd."}
{"English":"Specifying a default value for a prop If you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting = and the default value right after the parameter.","Tamil":"\u0b92\u0bb0\u0bc1 prop\u0b95\u0bcd\u0b95\u0bc1 default value \u0b95\u0bc1\u0bb1\u0bbf\u0baa\u0bcd\u0baa\u0bbf\u0b9f\u0bc1\u0ba4\u0bb2\u0bcd \u0b92\u0bb0\u0bc1 prop\u0b95\u0bcd\u0b95\u0bc1 \u0b8e\u0ba8\u0bcd\u0ba4 value\u0bae\u0bcd \u0b95\u0bc1\u0bb1\u0bbf\u0baa\u0bcd\u0baa\u0bbf\u0b9f\u0baa\u0bcd\u0baa\u0b9f\u0bbe\u0ba4\u0baa\u0bcb\u0ba4\u0bc1 default value \u0b95\u0bca\u0b9f\u0bc1\u0b95\u0bcd\u0b95 \u0bb5\u0bbf\u0bb0\u0bc1\u0bae\u0bcd\u0baa\u0bbf\u0ba9\u0bbe\u0bb2\u0bcd, parameter \u0baa\u0bbf\u0bb1\u0b95\u0bc1 = \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd default value \u0bb5\u0bc8\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd."}
{"English":"Nesting components You can nest content inside a JSX tag, and the parent component will receive that content in a prop called children.","Tamil":"component\u0b95\u0bb3\u0bc8 \u0b87\u0b9f\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0ba4\u0bb2\u0bcd \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0b92\u0bb0\u0bc1 JSX tag\u0bb2\u0bcd content--\u0b90 nest \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bb2\u0bae\u0bcd, \u0bae\u0bc7\u0bb2\u0bc1\u0bae\u0bcd parent component \u0b85\u0ba8\u0bcd\u0ba4 content children \u0b8e\u0ba9\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd prop\u0bb2\u0bcd \u0baa\u0bc6\u0bb1\u0bc1\u0bae\u0bcd."}
{"English":"Handling events React events are named using camelCase, rather than lowercase. With JSX, you pass a function as the event handler, rather than a string.","Tamil":"Handling events React Events lowercase \u0b90 \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bbe\u0bae\u0bb2\u0bcd camelCase \u0b90\u0baa\u0bcd \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf \u0baa\u0bc6\u0baf\u0bb0\u0bbf\u0b9f\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0b95\u0bbf\u0ba9\u0bcd\u0bb1\u0ba9. JSX \u0b87\u0bb2\u0bcd, \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0b92\u0bb0\u0bc1 \u0baa\u0ba4\u0bbf\u0bb2\u0bbe\u0b95 \u0b92\u0bb0\u0bc1 code \u0ba8\u0bbf\u0b95\u0bb4\u0bcd\u0bb5\u0bc1 handler\u0bb0\u0bbe\u0b95 \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0b95\u0bbf\u0bb1\u0bc0\u0bb0\u0bcd\u0b95\u0bb3\u0bcd."}
{"English":"Conditional rendering You can create distinct components that encapsulate the behavior you need. Then, you can render only some of them, depending on the state of your application.","Tamil":"Conditional rendering \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1 \u0ba4\u0bc7\u0bb5\u0bc8\u0baf\u0bbe\u0ba9 \u0ba8\u0b9f\u0ba4\u0bcd\u0ba4\u0bc8 \u0b85\u0b9f\u0b99\u0bcd\u0b95\u0bbf\u0baf \u0ba4\u0ba9\u0bbf\u0ba4\u0bcd\u0ba4\u0ba9\u0bbf component\u0b9f\u0bc1\u0b95\u0bb3\u0bc8 \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd. \u0baa\u0bbf\u0bb1\u0b95\u0bc1, \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd application state \u0baa\u0bca\u0bb1\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1, \u0b9a\u0bbf\u0bb2\u0bb5\u0bb1\u0bcd\u0bb1\u0bc8 \u0bae\u0b9f\u0bcd\u0b9f\u0bc1\u0bae\u0bc7 render \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bb2\u0bbe\u0bae\u0bcd."}
{"English":"Using the useState Hook The useState Hook lets you add state to functional components. Call it inside a function component to add some local state to it.","Tamil":"useState hook \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd useState hook functional component\u0b95\u0bb3\u0bbf\u0bb2\u0bcd state\u0baf\u0bc8\u0b9a\u0bcd \u0b9a\u0bc7\u0bb0\u0bcd\u0b95\u0bcd\u0b95 \u0b85\u0ba9\u0bc1\u0bae\u0ba4\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1. \u0b92\u0bb0\u0bc1 functional component\u0b9f\u0bbf\u0ba9\u0bcd \u0b89\u0bb3\u0bcd\u0bb3\u0bc7 \u0b85\u0ba4\u0bc8 \u0b85\u0bb4\u0bc8\u0ba4\u0bcd\u0ba4\u0bc1 \u0b9a\u0bbf\u0bb2 local state\u0baf\u0bc8 \u0b85\u0ba4\u0bbf\u0bb2\u0bcd \u0b9a\u0bc7\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bb5\u0bc1\u0bae\u0bcd."}
{"English":"Using the useEffect Hook The useEffect Hook lets you perform side effects in your function components. It's like componentDidMount, componentDidUpdate, and componentWillUnmount combined.","Tamil":"useEffect hook \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd useEffect hook \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd functional component\u0b9f\u0bc1\u0b95\u0bb3\u0bbf\u0bb2\u0bcd \u0baa\u0b95\u0bcd\u0b95 \u0bb5\u0bbf\u0bb3\u0bc8\u0bb5\u0bc1\u0b95\u0bb3\u0bc8\u0b9a\u0bcd \u0b9a\u0bc6\u0baf\u0bcd\u0baf \u0b85\u0ba9\u0bc1\u0bae\u0ba4\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1. \u0b87\u0ba4\u0bc1 componentDidMount, componentDidUpdate, \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd componentWillUnmount \u0b90\u0b9a\u0bcd \u0b9a\u0bc7\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1."}
{"English":"Rendering lists You can build collections of elements and include them in JSX using curly braces {}. Use the map() function to transform an array of data into an array of elements.","Tamil":"list render \u0b9a\u0bc6\u0baf\u0bcd\u0ba4\u0bb2\u0bcd \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bc8 \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd curly braces {} \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf JSX \u0b87\u0bb2\u0bcd \u0b89\u0bb3\u0bcd\u0bb3\u0b9f\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd. \u0b92\u0bb0\u0bc1 \u0ba4\u0bb0\u0bb5\u0bc1\u0ba4\u0bcd \u0ba4\u0bca\u0b95\u0bc1\u0baa\u0bcd\u0baa\u0bc8 \u0b92\u0bb0\u0bc1 data array\u0b95 \u0bae\u0bbe\u0bb1\u0bcd\u0bb1 map() function \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bb5\u0bc1\u0bae\u0bcd."}
{"English":"Keys in lists Keys help React identify which items have changed, are added, or are removed. They should be given to the elements inside the array to give the elements a stable identity.","Tamil":"Keys in lists Keys \u0b8e\u0ba8\u0bcd\u0ba4  items \u0bae\u0bbe\u0bb1\u0bcd\u0bb1\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f\u0ba9, \u0b9a\u0bc7\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f\u0ba9 \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 \u0ba8\u0bc0\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f\u0ba9 \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc8\u0b95\u0bcd \u0b95\u0ba3\u0bcd\u0b9f\u0bb1\u0bbf\u0baf React \u0b95\u0bcd\u0b95\u0bc1 \u0b89\u0ba4\u0bb5\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1. \u0b85\u0bb5\u0bb1\u0bcd\u0bb1\u0bbf\u0ba9\u0bcd \u0ba8\u0bbf\u0bb2\u0bc8\u0baf\u0bbe\u0ba9 \u0b85\u0b9f\u0bc8\u0baf\u0bbe\u0bb3\u0ba4\u0bcd\u0ba4\u0bc8 \u0bb5\u0bb4\u0b99\u0bcd\u0b95 list\u0ba9\u0bcd \u0b89\u0bb3\u0bcd\u0bb3\u0bc7 \u0b89\u0bb3\u0bcd\u0bb3 items\u0b95\u0bcd\u0b95\u0bc1 \u0bb5\u0bb4\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f \u0bb5\u0bc7\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd."}
{"English":"Forms in React In HTML, form elements such as <input>, <textarea>, and <select> maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components.","Tamil":"React \u0b87\u0bb2\u0bcd forms\u0b95\u0bb3\u0bcd HTML \u0b87\u0bb2\u0bcd, <input>, <textarea>, \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd <select> \u0baa\u0bcb\u0ba9\u0bcd\u0bb1 form elements \u0ba4\u0b99\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd state\u0baf\u0bc8 \u0ba4\u0b95\u0bcd\u0b95\u0bb5\u0bc8\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0bca\u0ba3\u0bcd\u0b9f\u0bc1, user input\u0b9f\u0bc8 \u0b85\u0b9f\u0bbf\u0baa\u0bcd\u0baa\u0b9f\u0bc8\u0baf\u0bbe\u0b95\u0b95\u0bcd \u0b95\u0bca\u0ba3\u0bcd\u0b9f\u0bc1 \u0b85\u0ba4\u0bc8 \u0baa\u0bc1\u0ba4\u0bc1\u0baa\u0bcd\u0baa\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0ba9\u0bcd\u0bb1\u0ba9. React \u0b87\u0bb2\u0bcd, \u0bae\u0bbe\u0bb1\u0b95\u0bcd\u0b95\u0bc2\u0b9f\u0bbf\u0baf state \u0baa\u0bca\u0ba4\u0bc1\u0bb5\u0bbe\u0b95 component\u0b9f\u0bbf\u0ba9\u0bcd state \u0bb5\u0bc8\u0ba4\u0bcd\u0ba4\u0bbf\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd."}
{"English":"Controlled Components In React, a controlled component is an input element whose value is controlled by the state of the component. For example, a form input that is controlled by the state of the component.","Tamil":"Controlled Components React \u0b87\u0bb2\u0bcd, Controlled component \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0b85\u0ba4\u0ba9\u0bcd value component\u0b9f\u0bbf\u0ba9\u0bcd state \u0bae\u0bc2\u0bb2\u0bae\u0bcd \u0b95\u0b9f\u0bcd\u0b9f\u0bc1\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd input element. \u0b8e\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bbe\u0b95, component\u0b9f\u0bbf\u0ba9\u0bcd state \u0bae\u0bc2\u0bb2\u0bae\u0bcd \u0b95\u0b9f\u0bcd\u0b9f\u0bc1\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd"}
{"English":"Uncontrolled Components\nAn uncontrolled component is an input element that is not controlled by the state of the component. Instead, it maintains its own internal state.\n","Tamil":"Uncontrolled Components\nUncontrolled Components \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 component\u0b9f\u0bbf\u0ba9\u0bcd state \u0bae\u0bc2\u0bb2\u0bae\u0bcd \u0b95\u0b9f\u0bcd\u0b9f\u0bc1\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0baa\u0bcd\u0baa\u0b9f\u0bbe\u0ba4 input element. \u0b87\u0ba4\u0bb1\u0bcd\u0b95\u0bc1 \u0baa\u0ba4\u0bbf\u0bb2\u0bbe\u0b95, \u0b87\u0ba4\u0bc1 \u0ba4\u0ba9\u0ba4\u0bc1 \u0b9a\u0bca\u0ba8\u0bcd\u0ba4 \u0b89\u0bb3\u0bcdstate state\u0baf\u0bc8 \u0ba4\u0b95\u0bcd\u0b95\u0bb5\u0bc8\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd \u0b95\u0bca\u0bb3\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Handling form submission\nTo handle form submission, you can define a function that handles the event and then pass it as the `onSubmit` prop to the form element.\n","Tamil":"form submission \u0b95\u0bc8\u0baf\u0bbe\u0bb3\u0bc1\u0ba4\u0bb2\u0bcd\nform submission \u0b95\u0bc8\u0baf\u0bbe\u0bb3, event \u0b95\u0bc8\u0baf\u0bbe\u0bb3\u0bc1\u0bae\u0bcd function \u0bb5\u0bb0\u0bc8\u0baf\u0bb1\u0bc1\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd, \u0baa\u0bbf\u0ba9\u0bcd\u0ba9\u0bb0\u0bcd \u0b85\u0ba4\u0bc8 `onSubmit` prop \u0b86\u0b95 form element\u0b95\u0bcd\u0b95\u0bc1 \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bb2\u0bbe\u0bae\u0bcd.\n"}
{"English":"Lifting state up\nTo share state between two components, move it up to their closest common ancestor. This is called \u201clifting state up\u201d.\n","Tamil":"state\u0baf\u0bc8 \u0b89\u0baf\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bb2\u0bcd\n\u0b87\u0bb0\u0ba3\u0bcd\u0b9f\u0bc1 component\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1 \u0b87\u0b9f\u0bc8\u0baf\u0bc7 state \u0b90\u0baa\u0bcd \u0baa\u0b95\u0bbf\u0bb0\u0bcd\u0ba8\u0bcd\u0ba4\u0bc1 \u0b95\u0bca\u0bb3\u0bcd\u0bb3, \u0b85\u0ba4\u0bc8 \u0b85\u0bb5\u0bb1\u0bcd\u0bb1\u0bbf\u0ba9\u0bcd \u0bae\u0bbf\u0b95 \u0b85\u0bb0\u0bc1\u0b95\u0bbf\u0bb2\u0bc1\u0bb3\u0bcd\u0bb3 \u0baa\u0bca\u0ba4\u0bc1\u0bb5\u0bbe\u0ba9 ancestor component\u0b95\u0bcd\u0b95\u0bc1 \u0ba8\u0b95\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bb5\u0bc1\u0bae\u0bcd. \u0b87\u0ba4\u0bc8 \"state\u0baf\u0bc8 \u0b89\u0baf\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd\" \u0b8e\u0ba9\u0bcd\u0bb1\u0bc1 \u0b85\u0bb4\u0bc8\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1\n"}
{"English":"Composition vs Inheritance\nReact has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.\n","Tamil":"Composition vs Inheritance\nReact \u0b95\u0bcd\u0b95\u0bc1 \u0b92\u0bb0\u0bc1 \u0b9a\u0b95\u0bcd\u0ba4\u0bbf\u0bb5\u0bbe\u0baf\u0bcd\u0ba8\u0bcd\u0ba4 composition model \u0b89\u0bb3\u0bcd\u0bb3\u0ba4\u0bc1, \u0bae\u0bc7\u0bb2\u0bc1\u0bae\u0bcd component\u0b95\u0bb3\u0bbf\u0b9f\u0bc8\u0baf\u0bc7 code \u0bae\u0bb1\u0bc1\u0baa\u0baf\u0ba9\u0bcd\u0baa\u0bbe\u0b9f\u0bc1 \u0b9a\u0bc6\u0baf\u0bcd\u0baf Inheritance \u0baa\u0ba4\u0bbf\u0bb2\u0bbe\u0b95 composition \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4 \u0baa\u0bb0\u0bbf\u0ba8\u0bcd\u0ba4\u0bc1\u0bb0\u0bc8 \u0b9a\u0bc6\u0baf\u0bcd\u0b95\u0bbf\u0bb1\u0bcb\u0bae\u0bcd.\n\n"}
{"English":"Conditional rendering with `&&`\nYou can use JavaScript\u2019s `&&` operator to conditionally include an element. This works because in JavaScript, `true && expression` always evaluates to `expression`, and `false && expression` always evaluates to `false\n","Tamil":"`&&` \u0b89\u0b9f\u0ba9\u0bcd Conditional rendering \n\u0b92\u0bb0\u0bc1 element\u0baf\u0bc8 Conditional\u0b95 \u0b89\u0bb3\u0bcd\u0bb3\u0b9f\u0b95\u0bcd\u0b95 JavaScript \u0b87\u0ba9\u0bcd `&&` operator \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bb2\u0bbe\u0bae\u0bcd. JavaScript \u0b87\u0bb2\u0bcd, `true && expression` \u0b8e\u0baa\u0bcd\u0baa\u0bcb\u0ba4\u0bc1\u0bae\u0bcd `expression` \u0b86\u0b95 \u0bae\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bc0\u0b9f\u0bc1 \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bc1\u0bae\u0bcd, \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd `false && expression` \u0b8e\u0baa\u0bcd\u0baa\u0bcb\u0ba4\u0bc1\u0bae\u0bcd `false` \u0b86\u0b95 \u0bae\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bc0\u0b9f\u0bc1 \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bc1\u0bae\u0bcd.\n"}
{"English":"Preventing component re-renders\nReact will re-render a component if its props or state change. To prevent unnecessary re-renders, ensure that the state or props do not change unless necessary.\n","Tamil":"component re-renders \u0ba4\u0b9f\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0ba4\u0bb2\u0bcd\nReact \u0b85\u0ba4\u0ba9\u0bcd props \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 state \u0bae\u0bbe\u0bb1\u0bbf\u0ba9\u0bbe\u0bb2\u0bcd \u0b92\u0bb0\u0bc1 component\u0b9f\u0bc8 re-renders \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bc1\u0bae\u0bcd. \u0ba4\u0bc7\u0bb5\u0bc8\u0baf\u0bb1\u0bcd\u0bb1 re-renders \u0ba4\u0b9f\u0bc1\u0b95\u0bcd\u0b95, state \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 props\u0b95\u0bb3\u0bcd \u0ba4\u0bc7\u0bb5\u0bc8\u0baf\u0bb1\u0bcd\u0bb1\u0bbe\u0bb2\u0bcd \u0bae\u0b9f\u0bcd\u0b9f\u0bc1\u0bae\u0bc7 \u0bae\u0bbe\u0bb1\u0bbe\u0ba4\u0bb5\u0bbe\u0bb1\u0bc1 \u0b89\u0bb1\u0bc1\u0ba4\u0bbf \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bb5\u0bc1\u0bae\u0bcd.\n"}
{"English":"The `useRef` Hook\nThe `useRef` Hook is a function that returns a mutable ref object whose `.current` property is initialized to the passed argument (`initialValue`).\n","Tamil":"`useRef` hook\n`useRef` hook \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 \u0b9a\u0bc6\u0baf\u0bb2\u0bcd\u0baa\u0bbe\u0b9f\u0bc1, \u0b87\u0ba4\u0bc1 \u0b85\u0ba4\u0ba9\u0bcd `.current` property \u0bb5\u0bb4\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0b95\u0b9f\u0bcd\u0b9f\u0bb3\u0bc8\u0b95\u0bcd\u0b95\u0bc1 (`initialValue`) Initialized \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0b92\u0bb0\u0bc1 \u0bae\u0bbe\u0bb1\u0b95\u0bcd\u0b95\u0bc2\u0b9f\u0bbf\u0baf ref object\u0ba4\u0bcd \u0ba4\u0bbf\u0bb0\u0bc1\u0bae\u0bcd\u0baa \u0b85\u0bb3\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Avoiding prop drilling\nProp drilling is when you pass data through many layers of components just to get it to a deeply nested component. This can make your code harder to maintain.\n","Tamil":"prop drilling \u0ba4\u0bb5\u0bbf\u0bb0\u0bcd\u0baa\u0bcd\u0baa\u0ba4\u0bc1\nprop drilling \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 \u0b86\u0bb4\u0bae\u0bbe\u0b95 nested component\u0b9f\u0bc1\u0b95\u0bcd\u0b95\u0bc1 data \u0baa\u0bc6\u0bb1\u0bc1\u0bb5\u0ba4\u0bb1\u0bcd\u0b95\u0bbe\u0b95 \u0baa\u0bb2 layers \u0bb5\u0bb4\u0bbf\u0baf\u0bbe\u0b95 data \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0bb5\u0ba4\u0bbe\u0b95\u0bc1\u0bae\u0bcd. \u0b87\u0ba4\u0bc1 \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd code \u0baa\u0bb0\u0bbe\u0bae\u0bb0\u0bbf\u0b95\u0bcd\u0b95 \u0b95\u0b9f\u0bbf\u0ba9\u0bae\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd.\n"}
{"English":"Context API\nThe Context API provides a way to pass data through the component tree without having to pass props down manually at every level.\n","Tamil":"Context API\nContext API, \u0b92\u0bb5\u0bcd\u0bb5\u0bca\u0bb0\u0bc1 \u0bae\u0b9f\u0bcd\u0b9f\u0ba4\u0bcd\u0ba4\u0bbf\u0bb2\u0bc1\u0bae\u0bcd props\u0b95\u0bb3\u0bc8 \u0bb5\u0bb4\u0b95\u0bcd\u0b95\u0bae\u0bcd \u0baa\u0bcb\u0bb2\u0bcd \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bbe\u0bae\u0bb2\u0bcd, component tree \u0bb5\u0bb4\u0bbf\u0baf\u0bbe\u0b95 data \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa \u0b92\u0bb0\u0bc1 \u0bb5\u0bb4\u0bbf\u0baf\u0bc8 \u0bb5\u0bb4\u0b99\u0bcd\u0b95\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Error Boundaries\nError boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI.\n","Tamil":"Error Boundaries\nError Boundaries \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 React component\u0b9f\u0bc1\u0b95\u0bb3\u0bcd, \u0b85\u0bb5\u0bb1\u0bcd\u0bb1\u0bbf\u0ba9\u0bcd children component tree \u0b8e\u0b99\u0bcd\u0b95\u0bc7\u0ba9\u0bc1\u0bae\u0bcd Javascript error\u0b95\u0bb3\u0bc8\u0baa\u0bcd \u0baa\u0bbf\u0b9f\u0bbf\u0ba4\u0bcd\u0ba4\u0bc1, \u0b85\u0ba8\u0bcd\u0ba4 error\u0b95\u0bb3\u0bc8 \u0baa\u0ba4\u0bbf\u0bb5\u0bc1\u0b9a\u0bc6\u0baf\u0bcd\u0ba4\u0bc1, \u0b92\u0bb0\u0bc1 fallback UI\u0b90\u0b95\u0bcd \u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bc1\u0bae\u0bcd.\n"}
{"English":"React.memo\n`React.memo` is a higher order component that memoizes the result of a function component, preventing it from re-rendering unless its props have changed.\n","Tamil":"React.memo\n`React.memo` \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 higher order component, \u0b87\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 functional component\u0b9f\u0bbf\u0ba9\u0bcd \u0bae\u0bc1\u0b9f\u0bbf\u0bb5\u0bc1\u0b95\u0bb3\u0bc8 \u0ba8\u0bbf\u0ba9\u0bc8\u0bb5\u0bbe\u0b95 \u0bb5\u0bc8\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0bca\u0ba3\u0bcd\u0b9f\u0bc1, \u0b85\u0ba4\u0ba9\u0bcd props\u0b95\u0bb3\u0bcd \u0bae\u0bbe\u0bb1\u0bbf\u0baf\u0bb5\u0bb0\u0bc8 re-rendering \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bbe\u0bae\u0bb2\u0bcd \u0ba4\u0b9f\u0bc1\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Code-Splitting\nCode-splitting is a feature supported by bundlers like Webpack, which can create multiple bundles that can be loaded on demand, improving performance.\n","Tamil":"Code-Splitting\nCode-Splitting \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 Webpack \u0baa\u0bcb\u0ba9\u0bcd\u0bb1 bundlers\u0b95\u0bb3\u0bbe\u0bb2\u0bcd \u0b86\u0ba4\u0bb0\u0bbf\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd \u0b92\u0bb0\u0bc1 \u0b85\u0bae\u0bcd\u0b9a\u0bae\u0bcd, \u0b87\u0ba4\u0bc1 \u0baa\u0bb2 bundles \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bbf, \u0ba4\u0bc7\u0bb5\u0bc8\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd \u0baa\u0bca\u0bb4\u0bc1\u0ba4\u0bc1 load \u0b86\u0b95\u0bbf\u0bb1\u0ba4\u0bc1, performance \u0bae\u0bc7\u0bae\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Lazy Loading\nLazy loading is a design pattern that loads parts of your application only when they are needed. In React, you can use `React.lazy` to lazy load components.\n","Tamil":"Lazy Loading\nLazy Loading \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd application \u0baa\u0b95\u0bc1\u0ba4\u0bbf\u0b95\u0bb3\u0bc8 \u0b85\u0bb5\u0bc8 \u0ba4\u0bc7\u0bb5\u0bc8\u0baf\u0bbe\u0ba9 \u0baa\u0bcb\u0ba4\u0bc1 \u0bae\u0b9f\u0bcd\u0b9f\u0bc1\u0bae\u0bc7 load \u200b\u200b\u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bc1\u0bae\u0bcd design \u0bae\u0bc1\u0bb1\u0bc8. React \u0b87\u0bb2\u0bcd, \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd `React.lazy` \u0b90 \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf component\u0b95\u0bb3\u0bc8 Lazy Load \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bc1\u0bae\u0bcd\n"}
{"English":"React Router\nReact Router is a standard library for routing in React. It enables the navigation among views of various components in a React Application, allows changing the browser URL, and keeps UI in sync with the URL.\n","Tamil":"React Router\nReact Router \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 React \u0b87\u0bb2\u0bcd routing \u0b9a\u0bc6\u0bb2\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0bb5\u0ba4\u0bb1\u0bcd\u0b95\u0bbe\u0ba9 \u0b92\u0bb0\u0bc1 state\u0baf\u0bbe\u0ba9 library. \u0b87\u0ba4\u0bc1 React Application\u0bb2\u0bcd \u0baa\u0bb2 component\u0b95\u0bb3\u0bbf\u0ba9\u0bcd view \u0b87\u0b9f\u0bc8\u0baf\u0bc7 \u0bb5\u0bb4\u0bbf\u0b9a\u0bc6\u0bb2\u0bc1\u0ba4\u0bcd\u0ba4\u0bb2\u0bc8 \u0b9a\u0bc1\u0bb2\u0baa\u0bae\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1, browser URL \u0b90 \u0bae\u0bbe\u0bb1\u0bcd\u0bb1 \u0b85\u0ba9\u0bc1\u0bae\u0ba4\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1, \u0bae\u0bc7\u0bb2\u0bc1\u0bae\u0bcd UI \u0b90 URL \u0b89\u0b9f\u0ba9\u0bcd \u0b92\u0bb0\u0bc1\u0b99\u0bcd\u0b95\u0bbf\u0ba3\u0bc8\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"React PureComponent\nPureComponent is a base class in React that performs a shallow comparison of props and state, preventing unnecessary re-renders.\n","Tamil":"React PureComponent\nPureComponent \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 React \u0b87\u0bb2\u0bcd \u0b92\u0bb0\u0bc1 \u0b85\u0b9f\u0bbf\u0baa\u0bcd\u0baa\u0b9f\u0bc8 class, \u0b87\u0ba4\u0bc1 props \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd state \u0b95\u0bcd\u0b95\u0bbe\u0ba9 \u0bae\u0bc7\u0bb2\u0bcd \u0bae\u0b9f\u0bcd\u0b9f \u0b92\u0baa\u0bcd\u0baa\u0bc0\u0b9f\u0bcd\u0b9f\u0bc8\u0b9a\u0bcd \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bc1\u0bae\u0bcd, \u0ba4\u0bc7\u0bb5\u0bc8\u0baf\u0bb1\u0bcd\u0bb1 re-renders \u0ba4\u0b9f\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd.\n"}
{"English":"React Concurrent Mode\nConcurrent Mode is a set of new features in React that help applications stay responsive and gracefully adjust to the user\u2019s device capabilities and network speed.\n","Tamil":"React Concurrent Mode\nConcurrent Mode \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 React \u0b87\u0bb2\u0bcd \u0b89\u0bb3\u0bcd\u0bb3 \u0baa\u0bc1\u0ba4\u0bbf\u0baf \u0b85\u0bae\u0bcd\u0b9a\u0b99\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd \u0ba4\u0bca\u0b95\u0bc1\u0baa\u0bcd\u0baa\u0bbe\u0b95\u0bc1\u0bae\u0bcd, \u0b87\u0ba4\u0bc1 applications responsive \u0b86\u0b95 \u0bb5\u0bc8\u0b95\u0bcd\u0b95\u0bb5\u0bc1\u0bae\u0bcd  user\u2019s device \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0ba8\u0bc6\u0b9f\u0bcd\u0bb5\u0bca\u0bb0\u0bcd\u0b95\u0bcd network \u0ba4\u0b95\u0bc1\u0ba8\u0bcd\u0ba4\u0bb5\u0bbe\u0bb1\u0bc1 \u0b9a\u0bc0\u0bb0\u0bbe\u0b95 \u0b9a\u0bb0\u0bbf\u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bb5\u0bc1\u0bae\u0bcd \u0b89\u0ba4\u0bb5\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Using the React Profiler\nThe React Profiler helps you understand how your React application renders and tracks its performance.\n","Tamil":"React Profiler \u0b90 \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd\nReact Profiler \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd React application \u0b8e\u0baa\u0bcd\u0baa\u0b9f\u0bbf renders \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1 \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0b85\u0ba4\u0ba9\u0bcd performance \u0b8e\u0bb5\u0bcd\u0bb5\u0bbe\u0bb1\u0bc1 \u0b95\u0ba3\u0bcd\u0b95\u0bbe\u0ba3\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1 \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc8\u0baa\u0bcd \u0baa\u0bc1\u0bb0\u0bbf\u0ba8\u0bcd\u0ba4\u0bc1 \u0b95\u0bca\u0bb3\u0bcd\u0bb3 \u0b89\u0ba4\u0bb5\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Server-Side Rendering with React\nServer-Side Rendering (SSR) is a technique where your React components are rendered on the server and the resulting HTML is sent to the client.\n","Tamil":"React \u0b89\u0b9f\u0ba9\u0bcd Server-Side Rendering\nServer-Side Rendering (SSR) \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 technique, \u0b87\u0ba4\u0bbf\u0bb2\u0bcd \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd React components server\u0bb2\u0bcd render \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0b85\u0ba4\u0bb1\u0bcd\u0b95\u0bbe\u0ba9 HTML client \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd.\n"}
{"English":"React Refs for DOM Access\nRefs provide a way to access DOM nodes or React elements created in the render method.\n","Tamil":"React Refs for DOM Access\nRefs \u0bae\u0bc2\u0bb2\u0bae\u0bcd render method\u0bb2\u0bcd \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f DOM nodes \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 React element\u0b95\u0bb3\u0bc8 \u0b85\u0ba3\u0bc1\u0b95\u0bc1\u0bb5\u0ba4\u0bb1\u0bcd\u0b95\u0bbe\u0ba9 \u0bb5\u0bb4\u0bbf\u0baf\u0bc8 \u0bb5\u0bb4\u0b99\u0bcd\u0b95\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"React Portals\nPortals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n","Tamil":"React Portals\nPortals \u0bae\u0bc2\u0bb2\u0bae\u0bcd children parent component DOM \u0bb5\u0bb0\u0bbf\u0b9a\u0bc8\u0baf\u0bbf\u0bb2\u0bcd \u0b87\u0bb2\u0bcd\u0bb2\u0bbe\u0ba4 DOM node \u0b92\u0ba9\u0bcd\u0bb1\u0bbf\u0bb2\u0bcd \u0bb0\u0bc6\u0ba3\u0bcd\u0b9f\u0bb0\u0bcd \u0b9a\u0bc6\u0baf\u0bcd\u0bb5\u0ba4\u0bb1\u0bcd\u0b95\u0bbe\u0ba9 \u0bb5\u0bb4\u0bbf\u0baf\u0bc8 \u0bb5\u0bb4\u0b99\u0bcd\u0b95\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"React's Virtual DOM\nReact's virtual DOM is a lightweight copy of the actual DOM that allows for efficient updates and rendering.\n","Tamil":"React \u0b87\u0ba9\u0bcd Virtual DOM\nReact \u0b87\u0ba9\u0bcd virtual DOM \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0b89\u0ba3\u0bcd\u0bae\u0bc8\u0baf\u0bbe\u0ba9 DOM \u0b87\u0ba9\u0bcd \u0b8e\u0b9f\u0bc8 \u0b95\u0bc1\u0bb1\u0bc8\u0ba8\u0bcd\u0ba4 copy, \u0b87\u0ba4\u0bc1 efficient updates\u0b95\u0bc1\u0bae\u0bcd render\u0b95\u0bc1\u0bae\u0bcd \u0b85\u0ba9\u0bc1\u0bae\u0ba4\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"React DevTools Extension\nReact DevTools is a browser extension that provides a set of utilities to inspect the React component hierarchy and state.\n","Tamil":"React DevTools Extension\nReact DevTools \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 React component \u0bb5\u0bb0\u0bbf\u0b9a\u0bc8 \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd state \u0b90 \u0b86\u0baf\u0bcd\u0bb5\u0bc1 \u0b9a\u0bc6\u0baf\u0bcd\u0baf \u0b89\u0ba4\u0bb5\u0bc1\u0bae\u0bcd browser extension.\n"}
{"English":"Using Fragments in React\nReact Fragments let you group a list of children without adding extra nodes to the DOM.\n","Tamil":"React \u0b87\u0bb2\u0bcd Fragments \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd\nReact Fragments \u0b95\u0bc2\u0b9f\u0bc1\u0ba4\u0bb2\u0bcd nodes \u0b90 DOM \u0b87\u0bb2\u0bcd \u0b9a\u0bc7\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bbe\u0bae\u0bb2\u0bcd list of children\u0b90 \u0b95\u0bc1\u0bb4\u0bc1\u0bb5\u0bbe\u0b95 \u0b87\u0ba3\u0bc8\u0b95\u0bcd\u0b95 \u0b85\u0ba9\u0bc1\u0bae\u0ba4\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0ba9\u0bcd\u0bb1\u0ba9.\n"}
{"English":"Higher-Order Components\nA higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, but a pattern that emerges from React\u2019s compositional nature.\n","Tamil":"Higher-Order Components\nHigher-Order Components (HOC) \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 React \u0b87\u0bb2\u0bcd component logic \u0b90 \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4 advanced technique. HOCs React API \u0b87\u0bb2\u0bcd \u0b92\u0bb0\u0bc1 \u0baa\u0b95\u0bc1\u0ba4\u0bbf \u0b85\u0bb2\u0bcd\u0bb2, \u0b86\u0ba9\u0bbe\u0bb2\u0bcd React \u0b87\u0ba9\u0bcd compositional nature \u0ba4\u0bcb\u0ba9\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0b92\u0bb0\u0bc1 pattern.\n"}
{"English":"Creating a Context\nTo create a new context, use `React.createContext`. This will create a `Context` object that you can use to pass data through the component tree.\n","Tamil":"\u0b92\u0bb0\u0bc1 Context \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0ba4\u0bb2\u0bcd\n\u0b92\u0bb0\u0bc1 \u0baa\u0bc1\u0ba4\u0bbf\u0baf context \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95, `React.createContext` \u0b90 \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bb5\u0bc1\u0bae\u0bcd. \u0b87\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 `Context` object \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd, \u0b87\u0ba4\u0bc1 component tree \u0bae\u0bc2\u0bb2\u0bae\u0bcd data\u0b95\u0bb3\u0bc8 \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bb2\u0bbe\u0bae\u0bcd.\n"}
{"English":"Rendering Multiple Components\nYou can build encapsulated components that manage their own state, and then compose them to make complex UIs.\n","Tamil":"\u0baa\u0bb2 component\u0b95\u0bb3\u0bc8 render \u0b9a\u0bc6\u0baf\u0bcd\u0ba4\u0bb2\u0bcd\n\u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd state\u0baf\u0bc8 \u0ba8\u0bbf\u0bb0\u0bcd\u0bb5\u0b95\u0bbf\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd encapsulated component\u0b95\u0bb3\u0bc8 \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd, \u0baa\u0bbf\u0bb1\u0b95\u0bc1 \u0b85\u0bb5\u0bb1\u0bcd\u0bb1\u0bc8\u0b9a\u0bcd \u0b9a\u0bc7\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bc1 \u0b9a\u0bbf\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0ba9 UI-\u0b95\u0bb3\u0bc8 \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd.\n"}
{"English":"Sharing State Between Components\nTo share state between components, you can lift the state up to their closest common ancestor. This way, the state will be managed in one place and passed down via props.\n","Tamil":"component\u0b95\u0bb3\u0bcd \u0b87\u0b9f\u0bc8\u0baf\u0bc7 state\u0baf\u0bc8\u0baa\u0bcd \u0baa\u0b95\u0bbf\u0bb0\u0bcd\u0bb5\u0bc1 \u0b9a\u0bc6\u0baf\u0bcd\u0ba4\u0bb2\u0bcd\ncomponent\u0b95\u0bb3\u0bcd \u0b87\u0b9f\u0bc8\u0baf\u0bc7 state\u0baf\u0bc8\u0baa\u0bcd \u0baa\u0b95\u0bbf\u0bb0, \u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd state\u0baf\u0bc8 \u0b85\u0bb5\u0bb0\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd \u0bae\u0bbf\u0b95 \u0ba8\u0bc6\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bae\u0bbe\u0ba9 \u0baa\u0bca\u0ba4\u0bc1\u0bb5\u0bbe\u0ba9 ancestor\u0b95\u0bcd\u0b95\u0bc1 \u0b89\u0baf\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bb2\u0bbe\u0bae\u0bcd. \u0b87\u0ba8\u0bcd\u0ba4 \u0bb5\u0bb4\u0bbf\u0baf\u0bbf\u0bb2\u0bcd, state \u0b92\u0bb0\u0bc1 \u0b87\u0b9f\u0ba4\u0bcd\u0ba4\u0bbf\u0bb2\u0bcd \u0ba8\u0bbf\u0bb0\u0bcd\u0bb5\u0b95\u0bbf\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd props\u0b95\u0bb3\u0bcd \u0bae\u0bc2\u0bb2\u0bae\u0bcd \u0b95\u0bc0\u0bb4\u0bc7 \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd.\n"}
{"English":"Using the useReducer Hook\nThe `useReducer` Hook is usually preferable to `useState` when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one.\n","Tamil":"`useReducer` hook \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd\n\u0baa\u0bb2 \u0ba4\u0bc1\u0ba3\u0bc8 value\u0b95\u0bb3\u0bc8 \u0b89\u0bb3\u0bcd\u0bb3\u0b9f\u0b95\u0bcd\u0b95\u0bbf\u0baf \u0b9a\u0bbf\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0ba9 state logic \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1 \u0b87\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd \u0baa\u0bcb\u0ba4\u0bc1 \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 \u0b85\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4 state previous one \u0bae\u0bc0\u0ba4\u0bc1 \u0b9a\u0bbe\u0bb0\u0bcd\u0ba8\u0bcd\u0ba4\u0bbf\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd \u0baa\u0bcb\u0ba4\u0bc1 `useState` \u0b90 \u0bb5\u0bbf\u0b9f `useReducer` hook \u0baa\u0bca\u0ba4\u0bc1\u0bb5\u0bbe\u0b95 \u0bb5\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bae\u0bbe\u0ba9\u0ba4\u0bbe\u0b95 \u0b87\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd.\n"}
{"English":"Using Memoization in React\nMemoization is an optimization technique that can help improve performance by caching the results of expensive function calls and reusing those cached results when the same inputs occur again.\n","Tamil":"React \u0b87\u0bb2\u0bcd Memoization \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd\nMemoization \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 optimization \u0ba4\u0bca\u0bb4\u0bbf\u0bb2\u0bcd\u0ba8\u0bc1\u0b9f\u0bcd\u0baa\u0bae\u0bbe\u0b95\u0bc1\u0bae\u0bcd, \u0b87\u0ba4\u0bc1 expensive function calls \u0bae\u0bc1\u0b9f\u0bbf\u0bb5\u0bc1\u0b95\u0bb3\u0bc8 \u0b9a\u0bc7\u0bae\u0bbf\u0ba4\u0bcd\u0ba4\u0bc1, \u0b85\u0ba4\u0bc7 input\u0b95\u0bb3\u0bcd \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0ba8\u0bbf\u0b95\u0bb4\u0bc1\u0bae\u0bcd \u0baa\u0bcb\u0ba4\u0bc1 \u0b85\u0ba8\u0bcd\u0ba4 \u0b9a\u0bc7\u0bae\u0bbf\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0bae\u0bc1\u0b9f\u0bbf\u0bb5\u0bc1\u0b95\u0bb3\u0bc8 \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4 \u0b89\u0ba4\u0bb5\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Optimizing Performance\nTo optimize the performance of a React application, you can use techniques like code splitting, lazy loading, and memoization.\n","Tamil":"performance \u0bae\u0bc7\u0bae\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd\nReact application performance \u0bae\u0bc7\u0bae\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4, code splitting, lazy loading \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd memoization \u0baa\u0bcb\u0ba9\u0bcd\u0bb1 \u0ba4\u0bca\u0bb4\u0bbf\u0bb2\u0bcd\u0ba8\u0bc1\u0b9f\u0bcd\u0baa\u0b99\u0bcd\u0b95\u0bb3\u0bc8\u0baa\u0bcd \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bb2\u0bbe\u0bae\u0bcd.\n"}
{"English":"Error Boundaries\nError boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of crashing the whole component tree.\n","Tamil":"Error Boundaries\nError Boundaries \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 React component\u0b95\u0bb3\u0bcd, \u0b85\u0bb5\u0bc8 \u0b85\u0bb5\u0bb0\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd children component tree \u0b8e\u0ba8\u0bcd\u0ba4 \u0b87\u0b9f\u0ba4\u0bcd\u0ba4\u0bbf\u0bb2\u0bc1\u0bae\u0bcd JavaScript error\u0b95\u0bb3\u0bc8\u0baa\u0bcd \u0baa\u0bbf\u0b9f\u0bbf\u0ba4\u0bcd\u0ba4\u0bc1, \u0b85\u0bb5\u0bb1\u0bcd\u0bb1\u0bc8 \u0baa\u0ba4\u0bbf\u0bb5\u0bc1 \u0b9a\u0bc6\u0baf\u0bcd\u0ba4\u0bc1, \u0bae\u0bca\u0ba4\u0bcd\u0ba4 component tree \u0bb5\u0bc0\u0bb4\u0bcd\u0ba4\u0bcd\u0ba4\u0bbe\u0bae\u0bb2\u0bcd \u0bae\u0bbe\u0bb1\u0bc1\u0ba4\u0bb2\u0bbe\u0ba9 UI\u0b90\u0b95\u0bcd \u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bbf\u0ba9\u0bcd\u0bb1\u0ba9.\n"}
{"English":"Forwarding Refs\nRef forwarding is a technique for automatically passing a ref through a component to one of its children.\n","Tamil":"Forwarding Refs\nRef forwarding  \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0ba4\u0bb2\u0bcd \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 component \u0bae\u0bc2\u0bb2\u0bae\u0bcd ref \u0b90 \u0ba4\u0bbe\u0ba9\u0bbe\u0b95\u0bb5\u0bc7 \u0b85\u0ba4\u0ba9\u0bcd children\u0b95\u0bb3\u0bbf\u0bb2\u0bcd \u0b92\u0ba9\u0bcd\u0bb1\u0bc1\u0b95\u0bcd\u0b95\u0bc1 \u0b85\u0ba9\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0bb5\u0ba4\u0bb1\u0bcd\u0b95\u0bbe\u0ba9 \u0ba4\u0bca\u0bb4\u0bbf\u0bb2\u0bcd\u0ba8\u0bc1\u0b9f\u0bcd\u0baa\u0bae\u0bbe\u0b95\u0bc1\u0bae\u0bcd.\n"}
{"English":"Context Provider\nA context provider allows consuming components to subscribe to context changes. You use a context provider to pass down context to components in the tree.\n","Tamil":"Context Provider\nContext Provider context \u0bae\u0bbe\u0bb1\u0bcd\u0bb1\u0b99\u0bcd\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1 subscribe \u0b9a\u0bc6\u0baf\u0bcd\u0baf consuming component\u0b95\u0bb3\u0bc8 \u0b85\u0ba9\u0bc1\u0bae\u0ba4\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0ba9\u0bcd\u0bb1\u0bbe\u0bb0\u0bcd. component\u0b95\u0bb3\u0bcd tree\u0bb2\u0bcd context \u0b90 \u0bb5\u0bb4\u0b99\u0bcd\u0b95 context provider \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bbf\u0bb1\u0bc0\u0bb0\u0bcd\u0b95\u0bb3\u0bcd.\n"}
{"English":"Using the useContext Hook\nThe `useContext` Hook lets you access the context value directly from within a functional component.\n","Tamil":"`useContext` hook \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0ba4\u0bb2\u0bcd\n`useContext` hook \u0bae\u0bc2\u0bb2\u0bae\u0bcd \u0b92\u0bb0\u0bc1 functional component\u0b9f\u0bbf\u0ba9\u0bcd \u0b89\u0bb3\u0bcd\u0bb3\u0bc7 context value \u0ba8\u0bc7\u0bb0\u0b9f\u0bbf\u0baf\u0bbe\u0b95 \u0b85\u0ba3\u0bc1\u0b95\u0bb2\u0bbe\u0bae\u0bcd.\n"}
{"English":"Suspense in React\nSuspense lets your components wait for something before they can render. It can be used to handle lazy-loaded components or data fetching.\n","Tamil":"React \u0b87\u0bb2\u0bcd Suspense\nSuspense \u0bae\u0bc2\u0bb2\u0bae\u0bcd \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd component\u0b95\u0bb3\u0bcd render \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bc1\u0bae\u0bc1\u0ba9\u0bcd \u0b9a\u0bbf\u0bb2\u0bb5\u0bb1\u0bcd\u0bb1\u0bc1\u0b95\u0bcd\u0b95\u0bbe\u0b95\u0b95\u0bcd \u0b95\u0bbe\u0ba4\u0bcd\u0ba4\u0bbf\u0bb0\u0bc1\u0b95\u0bcd\u0b95 \u0bae\u0bc1\u0b9f\u0bbf\u0baf\u0bc1\u0bae\u0bcd. \u0b87\u0ba4\u0bc1 lazy-loaded component\u0b95\u0bb3\u0bc8 \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 data fetching \u0b95\u0bc8\u0baf\u0bbe\u0bb3 \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0baa\u0bcd\u0baa\u0b9f\u0bb2\u0bbe\u0bae\u0bcd.\n"}
{"English":"Lazy Loading in React\nLazy loading is a technique to defer loading of components until they are needed. This can improve the initial load time of the application.\n","Tamil":"React \u0b87\u0bb2\u0bcd Lazy Loading\nLazy loading \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc1 \u0ba4\u0bc7\u0bb5\u0bc8\u0baf\u0bbf\u0bb2\u0bcd\u0bb2\u0bbe\u0ba4 component\u0b95\u0bb3\u0bbf\u0ba9\u0bcd \u0b8f\u0bb1\u0bcd\u0bb1\u0ba4\u0bcd\u0ba4\u0bc8 \u0b92\u0ba4\u0bcd\u0ba4\u0bbf\u0bb5\u0bc8\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd \u0ba4\u0bca\u0bb4\u0bbf\u0bb2\u0bcd\u0ba8\u0bc1\u0b9f\u0bcd\u0baa\u0bae\u0bbe\u0b95\u0bc1\u0bae\u0bcd. \u0b87\u0ba4\u0bc1 application \u0b86\u0bb0\u0bae\u0bcd\u0baa \u0b8f\u0bb1\u0bcd\u0bb1 \u0ba8\u0bc7\u0bb0\u0ba4\u0bcd\u0ba4\u0bc8 \u0bae\u0bc7\u0bae\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4 \u0bae\u0bc1\u0b9f\u0bbf\u0baf\u0bc1\u0bae\u0bcd.\n"}
{"English":"React Profiler\nThe React Profiler API allows you to collect timing information about each component rendering. This helps in identifying performance bottlenecks in your application.\n","Tamil":"React Profiler\nReact Profiler API \u0bae\u0bc2\u0bb2\u0bae\u0bcd \u0b92\u0bb5\u0bcd\u0bb5\u0bca\u0bb0\u0bc1 component rendering \u0ba8\u0bc7\u0bb0 \u0bb5\u0bbf\u0bb5\u0bb0\u0b99\u0bcd\u0b95\u0bb3\u0bc8\u0b9a\u0bcd \u0b9a\u0bc7\u0b95\u0bb0\u0bbf\u0b95\u0bcd\u0b95 \u0bae\u0bc1\u0b9f\u0bbf\u0baf\u0bc1\u0bae\u0bcd. \u0b87\u0ba4\u0bc1 \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd application \u0b9a\u0bc6\u0baf\u0bb2\u0bcd\u0ba4\u0bbf\u0bb1\u0ba9\u0bcd bottlenecks\u0b90 \u0b95\u0ba3\u0bcd\u0b9f\u0bb1\u0bbf\u0baf \u0b89\u0ba4\u0bb5\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.\n"}
{"English":"Creating Custom Hooks\nCustom Hooks let you extract component logic into reusable functions. They start with `use` as a convention and can call other Hooks.\n","Tamil":"Custom hook\u0b95\u0bc1\u0b95\u0bb3\u0bc8 \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0ba4\u0bb2\u0bcd\nCustom hook\u0b95\u0bc1\u0b95\u0bb3\u0bcd \u0bae\u0bc2\u0bb2\u0bae\u0bcd component logic \u0b90 \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd reusable function\u0b95\u0bb3\u0bbf\u0bb2\u0bcd \u0baa\u0bbf\u0bb0\u0bbf\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd. \u0b85\u0bb5\u0bc8 \u0b92\u0bb0\u0bc1 \u0bae\u0bb0\u0baa\u0bc1\u0b95\u0bcd\u0b95\u0bbf\u0ba3\u0b99\u0bcd\u0b95 `use` \u0ba4\u0bca\u0b9f\u0b99\u0bcd\u0b95\u0bbf, \u0bae\u0bb1\u0bcd\u0bb1 hook\u0b95\u0bc1\u0b95\u0bb3\u0bc8 \u0b85\u0bb4\u0bc8\u0b95\u0bcd\u0b95\u0bb2\u0bbe\u0bae\u0bcd.\n"}
